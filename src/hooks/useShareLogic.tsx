import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { toast } from '@/components/ui/use-toast';

interface ShareLogicParams {
  videoBlob: Blob | null;
}

export const useShareLogic = ({ videoBlob }: ShareLogicParams) => {
  const navigate = useNavigate();
  const [isSharing, setIsSharing] = useState(false);

  const prepareVideoMessage = () => {
    const locationData = localStorage.getItem('userLocation');
    let locationText = '';
    
    if (locationData) {
      try {
        const location = JSON.parse(locationData);
        const lat = parseFloat(location.latitude).toFixed(6);
        const lng = parseFloat(location.longitude).toFixed(6);
        const mapsUrl = `https://maps.google.com/?q=${lat},${lng}`;
        locationText = `\nüìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${lat}, ${lng}\nüó∫Ô∏è –ö–∞—Ä—Ç–∞: ${mapsUrl}`;
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', e);
      }
    }

    return `üé• –ù–æ–≤—ã–π –ª–∏–¥ IMPERIA PROMO!\nüìÖ ${new Date().toLocaleString('ru-RU')}${locationText}`;
  };

  const downloadVideo = () => {
    if (videoBlob) {
      const url = URL.createObjectURL(videoBlob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `imperia_lead_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.mp4`;
      a.style.display = 'none';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      return true;
    }
    return false;
  };

  const shareToTelegram = async () => {
    setIsSharing(true);
    
    try {
      if (!videoBlob) {
        throw new Error('–í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const message = prepareVideoMessage();
      const isAndroid = /Android/i.test(navigator.userAgent);
      const isIOS = /iPhone|iPad|iPod/i.test(navigator.userAgent);
      const isMobile = isAndroid || isIOS;
      
      // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const videoFile = new File([videoBlob], `imperia_lead_${Date.now()}.mp4`, {
        type: videoBlob.type || 'video/mp4'
      });
      
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: Web Share API (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–æ–±–∏–ª—å–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö)
      if (navigator.share && navigator.canShare) {
        try {
          const canShareFiles = navigator.canShare({ files: [videoFile] });
          
          if (canShareFiles) {
            await navigator.share({
              title: 'üé• –ù–æ–≤—ã–π –ª–∏–¥ IMPERIA PROMO',
              text: message,
              files: [videoFile]
            });
            
            toast({
              title: "‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
              description: "–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            });
            
            setTimeout(() => navigate('/success'), 1000);
            return;
          } else {
            // –ï—Å–ª–∏ –Ω–µ–ª—å–∑—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ–∞–π–ª–∞–º–∏, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–µ–ª–∏–º—Å—è —Ç–µ–∫—Å—Ç–æ–º
            await navigator.share({
              title: 'üé• –ù–æ–≤—ã–π –ª–∏–¥ IMPERIA PROMO',
              text: message
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é
            toast({
              title: "üì© –°–∫–∞—á–∞–π—Ç–µ –≤–∏–¥–µ–æ",
              description: "–ù–∞–∂–º–∏—Ç–µ '–°–∫–∞—á–∞—Ç—å' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ, –∑–∞—Ç–µ–º –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ–≥–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é",
            });
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
            setTimeout(() => {
              downloadVideo();
            }, 1000);
            
            return;
          }
          
        } catch (shareError: any) {
          console.log('Web Share API –æ—à–∏–±–∫–∞:', shareError);
          if (shareError.name === 'AbortError') {
            return; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª
          }
        }
      }
      
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ + –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
      const encodedMessage = encodeURIComponent(message);
      
      // –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
      downloadVideo();
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º Telegram —á–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      setTimeout(() => {
        if (isMobile) {
          // –ú–æ–±–∏–ª—å–Ω—ã–µ: –Ω–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
          window.location.href = `tg://msg?text=${encodedMessage}`;
          
          // Fallback –Ω–∞ –≤–µ–±-–≤–µ—Ä—Å–∏—é
          setTimeout(() => {
            window.open(`https://t.me/share/url?url=${encodedMessage}`, '_blank');
          }, 1500);
        } else {
          // Desktop: Telegram Web
          window.open(`https://web.telegram.org/a/#?text=${encodedMessage}`, '_blank');
        }
      }, 2000);
      
      toast({
        title: "üì• –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ!",
        description: isMobile 
          ? "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫–∞—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ Telegram"
          : "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å–∫–∞—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –æ–∫–Ω–æ Telegram",
      });
      
      setTimeout(() => navigate('/success'), 4000);
      
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
      
      // –í –∫–∞—á–µ—Å—Ç–≤–µ –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ fallback —Å–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
      try {
        downloadVideo();
        toast({
          title: "üì• –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ",
          description: "–û—Ç–∫—Ä–æ–π—Ç–µ Telegram –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫–∞—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª",
        });
      } catch (downloadError) {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ",
          variant: "destructive"
        });
      }
    } finally {
      setIsSharing(false);
    }
  };

  const shareToWhatsApp = async () => {
    setIsSharing(true);
    
    try {
      if (!videoBlob) {
        throw new Error('–í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const message = prepareVideoMessage();
      const isAndroid = /Android/i.test(navigator.userAgent);
      const isIOS = /iPhone|iPad|iPod/i.test(navigator.userAgent);
      const isMobile = isAndroid || isIOS;
      
      // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const videoFile = new File([videoBlob], `imperia_lead_${Date.now()}.mp4`, {
        type: videoBlob.type || 'video/mp4'
      });
      
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: Web Share API
      if (navigator.share && navigator.canShare) {
        try {
          const canShareFiles = navigator.canShare({ files: [videoFile] });
          
          if (canShareFiles) {
            await navigator.share({
              title: 'üé• –ù–æ–≤—ã–π –ª–∏–¥ IMPERIA PROMO',
              text: message,
              files: [videoFile]
            });
            
            toast({
              title: "‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
              description: "–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ WhatsApp",
            });
            
            setTimeout(() => navigate('/success'), 1000);
            return;
          }
          
        } catch (shareError: any) {
          console.log('Web Share API –æ—à–∏–±–∫–∞:', shareError);
          if (shareError.name === 'AbortError') {
            return;
          }
        }
      }
      
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ + –æ—Ç–∫—Ä—ã—Ç–∏–µ WhatsApp
      downloadVideo();
      
      const encodedMessage = encodeURIComponent(message);
      
      setTimeout(() => {
        if (isMobile) {
          // –ú–æ–±–∏–ª—å–Ω—ã–µ: –Ω–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
          window.location.href = `whatsapp://send?text=${encodedMessage}`;
          
          setTimeout(() => {
            window.open(`https://wa.me/?text=${encodedMessage}`, '_blank');
          }, 1500);
        } else {
          // Desktop: WhatsApp Web
          window.open(`https://web.whatsapp.com/send?text=${encodedMessage}`, '_blank');
        }
      }, 2000);
      
      toast({
        title: "üì• –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ!",
        description: isMobile 
          ? "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫–∞—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ WhatsApp"
          : "–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å–∫–∞—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ WhatsApp Web",
      });
      
      setTimeout(() => navigate('/success'), 4000);
      
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp:', error);
      
      try {
        downloadVideo();
        toast({
          title: "üì• –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ",
          description: "–û—Ç–∫—Ä–æ–π—Ç–µ WhatsApp –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫–∞—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª",
        });
      } catch (downloadError) {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ WhatsApp",
          variant: "destructive"
        });
      }
    } finally {
      setIsSharing(false);
    }
  };

  const shareToViber = async () => {
    setIsSharing(true);
    
    try {
      if (!videoBlob) {
        throw new Error('–í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const message = prepareVideoMessage();
      const isAndroid = /Android/i.test(navigator.userAgent);
      const isIOS = /iPhone|iPad|iPod/i.test(navigator.userAgent);
      const isMobile = isAndroid || isIOS;
      
      if (!isMobile) {
        toast({
          title: "üíú Viber",
          description: "Viber —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö",
          variant: "destructive"
        });
        return;
      }
      
      // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const videoFile = new File([videoBlob], `imperia_lead_${Date.now()}.mp4`, {
        type: videoBlob.type || 'video/mp4'
      });
      
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: Web Share API
      if (navigator.share && navigator.canShare) {
        try {
          const canShareFiles = navigator.canShare({ files: [videoFile] });
          
          if (canShareFiles) {
            await navigator.share({
              title: 'üé• –ù–æ–≤—ã–π –ª–∏–¥ IMPERIA PROMO',
              text: message,
              files: [videoFile]
            });
            
            toast({
              title: "‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
              description: "–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ Viber",
            });
            
            setTimeout(() => navigate('/success'), 1000);
            return;
          }
          
        } catch (shareError: any) {
          if (shareError.name === 'AbortError') {
            return;
          }
        }
      }
      
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ + –æ—Ç–∫—Ä—ã—Ç–∏–µ Viber
      downloadVideo();
      
      const encodedMessage = encodeURIComponent(message);
      
      setTimeout(() => {
        // Viber deep link
        window.location.href = `viber://forward?text=${encodedMessage}`;
      }, 2000);
      
      toast({
        title: "üì• –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ!",
        description: "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫–∞—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ Viber",
      });
      
      setTimeout(() => navigate('/success'), 4000);
      
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Viber:', error);
      
      try {
        downloadVideo();
        toast({
          title: "üì• –í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ",
          description: "–û—Ç–∫—Ä–æ–π—Ç–µ Viber –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫–∞—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª",
        });
      } catch (downloadError) {
        toast({
          title: "–û—à–∏–±–∫–∞",
          description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Viber",
          variant: "destructive"
        });
      }
    } finally {
      setIsSharing(false);
    }
  };

  const shareUniversal = async () => {
    if (!videoBlob) return;
    
    try {
      const videoFile = new File([videoBlob], 'imperia_video.mp4', {
        type: videoBlob.type || 'video/mp4'
      });
      
      await navigator.share({
        title: 'üé• –í–∏–¥–µ–æ IMPERIA PROMO',
        text: prepareVideoMessage(),
        files: [videoFile]
      });
    } catch (error) {
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞:', error);
    }
  };

  return {
    isSharing,
    shareToTelegram,
    shareToWhatsApp,
    shareToViber,
    shareUniversal,
    downloadVideo
  };
};